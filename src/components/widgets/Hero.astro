---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import ButtonUWL from '~/components/BtnUsersWaitList'
//import Background from '~/components/ui/Background.astro';

import { SignedIn, SignedOut } from "astro-clerk-auth/components/control";

import type { Hero as Props } from '~/types';
import ViewUWL from '../ViewUsersWaitList';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),

  actions_sign_in = await Astro.slots.render('actions_sign_in'),

  actions_sign_out = await Astro.slots.render('actions_sign_out'),

  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const user = await Astro.locals.currentUser();

---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class="text-center pb-10 md:pb-16 max-w-5xl mx-auto">
        {
          tagline && (
            <p
              class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading dark:text-gray-200"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">          
          {subtitle && <p class="text-xl text-muted mb-6 dark:text-slate-300" set:html={subtitle} />}
          <SignedIn>
            {
              actions_sign_in && (
                <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
                  {Array.isArray(actions_sign_in) ? (
                    actions_sign_in.map((action) => (
                      <div class="flex w-full sm:w-auto">
                        {
                          action.text === 'Join Waitlist' ?
                          <>
                            <ButtonUWL fullname={user?.fullName} email={user?.emailAddresses[0].emailAddress} incase={1} client:load/>
                          </> 
                          : 
                          <>
                            <Button {...(action || {})} class="w-full sm:mb-0" />
                          </>
                        }                        
                      </div>                      
                    ))
                  ) : (
                    <Fragment set:html={actions_sign_in} />
                  )}
                </div>
              )
            }
          </SignedIn>
          <SignedOut>
            {
              actions_sign_out && (
                <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
                  {Array.isArray(actions_sign_out) ? (
                    actions_sign_out.map((action) => (
                      <div class="flex w-full sm:w-auto">
                        <Button {...(action || {})} class="w-full sm:mb-0" />
                      </div>
                    ))
                  ) : (
                    <Fragment set:html={actions_sign_out} />
                  )}
                </div>
              )
            }            
          </SignedOut>
        </div>
        {content && <Fragment set:html={content} />}
        <SignedIn>
          <div class="mt-2">
            <ViewUWL email={user?.emailAddresses[0].emailAddress} client:load/>
          </div>
        </SignedIn>
      </div>      
      <div>
        {
          image && (
            <div class="relative m-auto max-w-5xl">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto rounded-md w-full"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={1024}
                  height={576}
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>
