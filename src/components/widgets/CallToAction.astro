---
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import type { CallToAction, Widget } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';
import ButtonUWL from '~/components/BtnUsersWaitList';
import { SignedIn, SignedOut } from 'astro-clerk-auth/components/control';

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  callToAction?: CallToAction;
  actions_sign_in?: string | CallToAction[];
  actions_sign_out?: string | CallToAction[];
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),

  actions_sign_in = await Astro.slots.render('actions_sign_in'),

  actions_sign_out = await Astro.slots.render('actions_sign_out'),

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const user = await Astro.locals.currentUser();
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div
    class="max-w-3xl mx-auto text-center p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-600"
  >
    <Headline
      title={title}
      subtitle={subtitle}
      tagline={tagline}
      classes={{
        container: 'mb-0 md:mb-0',
        title: 'text-4xl md:text-4xl font-bold tracking-tighter mb-4 font-heading',
        subtitle: 'text-xl text-muted dark:text-slate-400',
      }}
    />
    <br />
    <SignedIn>
      {
        actions_sign_in && (
          <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
            {Array.isArray(actions_sign_in) ? (
              actions_sign_in.map((action) => (
                <div class="flex w-full sm:w-auto">
                  {action.text === 'Start Coach' ? (
                    <>
                      <ButtonUWL
                        fullname={user?.fullName}
                        email={user?.emailAddresses[0].emailAddress}
                        incase={1}
                        client:load
                      />
                    </>
                  ) : (
                    <>
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </>
                  )}
                </div>
              ))
            ) : (
              <Fragment set:html={actions_sign_in} />
            )}
          </div>
        )
      }
    </SignedIn>
    <SignedOut>
      {
        actions_sign_out && (
          <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
            {Array.isArray(actions_sign_out) ? (
              actions_sign_out.map((action) => (
                <div class="flex w-full sm:w-auto">
                  <Button {...(action || {})} class="w-full sm:mb-0" />
                </div>
              ))
            ) : (
              <Fragment set:html={actions_sign_out} />
            )}
          </div>
        )
      }
    </SignedOut>
  </div>
</WidgetWrapper>
